// auto-generated: "lalrpop 0.19.1"
// sha256: 3f3abcf2b8c57e9d4203d17ad9395ec4eb3fb7fdad452e35bc09ab361ee398
use crate::util::interpreter_util::*;
use crate::util::preprocessor_util::LabelType;
use crate::util::flag_util::*;
use crate::util::data_util::*;
use crate::util::address::*;
use crate::arch::FLAG_CARRY;
use crate::vm::VM;
use crate::error;
use lalrpop_util::ParseError;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Interpreter {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use crate::util::interpreter_util::*;
    use crate::util::preprocessor_util::LabelType;
    use crate::util::flag_util::*;
    use crate::util::data_util::*;
    use crate::util::address::*;
    use crate::arch::FLAG_CARRY;
    use crate::vm::VM;
    use crate::error;
    use lalrpop_util::ParseError;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(usize),
        Variant2(State),
        Variant3(()),
        Variant4(Box<dyn Fn(&mut VM, u8, u8) -> u8>),
        Variant5(ByteReg),
        Variant6(bool),
        Variant7(String),
        Variant8(i16),
        Variant9(u8),
        Variant10(u16),
        Variant11(Box<dyn Fn(&mut VM, u16, u16) -> u16>),
        Variant12(WordReg),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 7, 0, 0, 46, 47, 48, 49, 0, 0, 0, 0, 0, 50, 8, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 9, 74, 75, 76, 77, 78, 79, 80, 81, 82, 0, 83, 84, 85, 86, 0, 87, 0, 0, 0,
        // State 1
        0, 0, 0, 91, 92, 0, 0, 93, 94, 0, 0, 10, 0, 95, 96, 0, 0, 0, 0, 0, 97, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 91, 92, 0, 0, 93, 94, 0, 0, 11, 0, 95, 96, 0, 0, 0, 0, 0, 97, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 4
        0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 8
        0, 0, 0, 91, 92, 0, 105, 93, 94, 0, 106, 14, 0, 95, 96, 0, 0, 0, 0, 107, 97, 0, 98, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0,
        // State 9
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 10
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 11
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 12
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 13
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 14
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 15
        0, 0, 0, 91, 92, 0, 0, 93, 94, 0, 0, 0, 0, 95, 96, 0, 0, 0, 0, 0, 97, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 16
        0, 0, 0, 91, 92, 0, 0, 93, 94, 0, 0, 25, 0, 95, 96, 0, 0, 0, 0, 0, 97, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 139, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 139, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 24
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 25
        0, 0, 0, 91, 92, 0, 0, 93, 94, 0, 0, 0, 0, 95, 96, 0, 0, 0, 0, 0, 97, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 27
        0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
        // State 28
        0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 168, 139, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 139, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 139, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, -30, -30, 0, -120, -30, -30, 0, -120, -30, 0, -30, -30, 0, 0, 0, 0, -120, -30, 0, -30, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84,
        // State 73
        0, 0, 0, -31, -31, 0, -121, -31, -31, 0, -121, -31, 0, -31, -31, 0, 0, 0, 0, -121, -31, 0, -31, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0,
        // State 74
        0, 0, 0, -48, -48, 0, -134, -48, -48, 0, -134, -48, 0, -48, -48, 0, 0, 0, 0, -134, -48, 0, -48, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0,
        // State 75
        0, 0, 0, -49, -49, 0, -135, -49, -49, 0, -135, -49, 0, -49, -49, 0, 0, 0, 0, -135, -49, 0, -49, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, -46, -46, 0, -132, -46, -46, 0, -132, -46, 0, -46, -46, 0, 0, 0, 0, -132, -46, 0, -46, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0,
        // State 78
        0, 0, 0, -47, -47, 0, -133, -47, -47, 0, -133, -47, 0, -47, -47, 0, 0, 0, 0, -133, -47, 0, -47, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0,
        // State 79
        0, 0, 0, -43, -43, 0, -129, -43, -43, 0, -129, -43, 0, -43, -43, 0, 0, 0, 0, -129, -43, 0, -43, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0,
        // State 80
        0, 0, 0, -44, -44, 0, -130, -44, -44, 0, -130, -44, 0, -44, -44, 0, 0, 0, 0, -130, -44, 0, -44, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0,
        // State 81
        0, 0, 0, -45, -45, 0, -131, -45, -45, 0, -131, -45, 0, -45, -45, 0, 0, 0, 0, -131, -45, 0, -45, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, -33, -33, 0, -123, -33, -33, 0, -123, -33, 0, -33, -33, 0, 0, 0, 0, -123, -33, 0, -33, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0,
        // State 86
        0, 0, 0, -32, -32, 0, -122, -32, -32, 0, -122, -32, 0, -32, -32, 0, 0, 0, 0, -122, -32, 0, -32, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0,
        // State 87
        16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 93
        -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        31, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        32, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        -10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        -9, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        -60, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        -59, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 157
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 69 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        -6,
        // State 34
        -28,
        // State 35
        -5,
        // State 36
        -114,
        // State 37
        -3,
        // State 38
        -117,
        // State 39
        -116,
        // State 40
        -27,
        // State 41
        -115,
        // State 42
        -29,
        // State 43
        -4,
        // State 44
        0,
        // State 45
        -52,
        // State 46
        -55,
        // State 47
        -57,
        // State 48
        -53,
        // State 49
        -58,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        -99,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        -51,
        // State 83
        -54,
        // State 84
        -56,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        -40,
        // State 90
        -35,
        // State 91
        -36,
        // State 92
        -37,
        // State 93
        -38,
        // State 94
        -39,
        // State 95
        -98,
        // State 96
        -41,
        // State 97
        -42,
        // State 98
        0,
        // State 99
        0,
        // State 100
        -85,
        // State 101
        -91,
        // State 102
        0,
        // State 103
        0,
        // State 104
        -125,
        // State 105
        -126,
        // State 106
        -127,
        // State 107
        -128,
        // State 108
        0,
        // State 109
        0,
        // State 110
        -50,
        // State 111
        -61,
        // State 112
        -118,
        // State 113
        -96,
        // State 114
        -92,
        // State 115
        -97,
        // State 116
        -93,
        // State 117
        0,
        // State 118
        -34,
        // State 119
        0,
        // State 120
        0,
        // State 121
        -124,
        // State 122
        0,
        // State 123
        -94,
        // State 124
        -95,
        // State 125
        -19,
        // State 126
        -25,
        // State 127
        -15,
        // State 128
        -11,
        // State 129
        -21,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        -119,
        // State 139
        -112,
        // State 140
        -110,
        // State 141
        -103,
        // State 142
        -102,
        // State 143
        -26,
        // State 144
        -20,
        // State 145
        -22,
        // State 146
        -16,
        // State 147
        -12,
        // State 148
        -113,
        // State 149
        -111,
        // State 150
        -105,
        // State 151
        -104,
        // State 152
        -13,
        // State 153
        -17,
        // State 154
        -23,
        // State 155
        -87,
        // State 156
        -86,
        // State 157
        -107,
        // State 158
        -106,
        // State 159
        -14,
        // State 160
        -24,
        // State 161
        -18,
        // State 162
        -109,
        // State 163
        -108,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        -88,
        // State 170
        -89,
        // State 171
        0,
        // State 172
        -90,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 33,
            4 => 130,
            5 => 131,
            6 => 34,
            7 => 35,
            8 => 1,
            9 => match state {
                2 => 98,
                8 => 113,
                16 => 127,
                _ => 87,
            },
            10 => match state {
                2 => 99,
                8 => 114,
                15 => 125,
                16 => 128,
                25 => 153,
                _ => 88,
            },
            11 => 2,
            12 => 36,
            13 => 37,
            14 => match state {
                30 => 164,
                _ => 132,
            },
            15 => 38,
            16 => 3,
            17 => 39,
            18 => match state {
                10 => 119,
                11 => 120,
                12 => 122,
                13 => 123,
                14 => 124,
                24 => 152,
                27 => 159,
                _ => 117,
            },
            19 => match state {
                3 => 100,
                6 => 110,
                11..=12 | 14 | 27 => 121,
                _ => 118,
            },
            20 => 40,
            21 => match state {
                18 => 139,
                19 => 141,
                22 => 148,
                23 => 150,
                26 => 157,
                29 => 162,
                _ => 89,
            },
            22 => 41,
            23 => match state {
                31 => 168,
                32 => 171,
                _ => 165,
            },
            24 => 42,
            25 => 43,
            26 => match state {
                15 => 126,
                16 => 129,
                18 => 140,
                19 => 142,
                22 => 149,
                23 => 151,
                25 => 154,
                26 => 158,
                29 => 163,
                _ => 111,
            },
            27 => match state {
                20 => 143,
                21 => 145,
                28 => 160,
                30..=32 => 166,
                _ => 133,
            },
            28 => 4,
            29 => match state {
                5 => 108,
                8 => 115,
                21 => 146,
                _ => 102,
            },
            30 => match state {
                5 => 109,
                8 => 116,
                20 => 144,
                21 => 147,
                28 => 161,
                _ => 103,
            },
            31 => 5,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###""[""###,
            r###""]""###,
            r###""ah""###,
            r###""al""###,
            r###""and""###,
            r###""ax""###,
            r###""bh""###,
            r###""bl""###,
            r###""bp""###,
            r###""bx""###,
            r###""byte""###,
            r###""call""###,
            r###""ch""###,
            r###""cl""###,
            r###""clc""###,
            r###""cld""###,
            r###""cli""###,
            r###""cmc""###,
            r###""cx""###,
            r###""dh""###,
            r###""di""###,
            r###""dl""###,
            r###""dx""###,
            r###""hlt""###,
            r###""int""###,
            r###""ja""###,
            r###""jae""###,
            r###""jb""###,
            r###""jbe""###,
            r###""jc""###,
            r###""jcxz""###,
            r###""je""###,
            r###""jg""###,
            r###""jge""###,
            r###""jl""###,
            r###""jle""###,
            r###""jmp""###,
            r###""jnc""###,
            r###""jne""###,
            r###""jno""###,
            r###""jnp""###,
            r###""jns""###,
            r###""jo""###,
            r###""jp""###,
            r###""js""###,
            r###""loop""###,
            r###""loope""###,
            r###""loopne""###,
            r###""not""###,
            r###""or""###,
            r###""rcl""###,
            r###""rcr""###,
            r###""ret""###,
            r###""rol""###,
            r###""ror""###,
            r###""sal""###,
            r###""sar""###,
            r###""shr""###,
            r###""si""###,
            r###""stc""###,
            r###""std""###,
            r###""sti""###,
            r###""test""###,
            r###""word""###,
            r###""xor""###,
            r###"r#"-[0-9]+"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[_a-zA-Z][_a-zA-Z0-9]*"#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'input, 's, '__2>
    where 
    {
        current: usize,
        vm: &'__2 mut VM,
        context: &'s mut Context,
        input: &'input str,
        __phantom: ::std::marker::PhantomData<(&'input (), &'s ())>,
    }
    impl<'input, 's, '__2> __state_machine::ParserDefinition for __StateMachine<'input, 's, '__2>
    where 
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = State;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 69 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<(&(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.current,
                self.vm,
                self.context,
                self.input,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<(&(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
        's,
    >(
        __token: &Token<'input>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(3, _) if true => Some(0),
            Token(4, _) if true => Some(1),
            Token(5, _) if true => Some(2),
            Token(6, _) if true => Some(3),
            Token(7, _) if true => Some(4),
            Token(8, _) if true => Some(5),
            Token(9, _) if true => Some(6),
            Token(10, _) if true => Some(7),
            Token(11, _) if true => Some(8),
            Token(12, _) if true => Some(9),
            Token(13, _) if true => Some(10),
            Token(14, _) if true => Some(11),
            Token(15, _) if true => Some(12),
            Token(16, _) if true => Some(13),
            Token(17, _) if true => Some(14),
            Token(18, _) if true => Some(15),
            Token(19, _) if true => Some(16),
            Token(20, _) if true => Some(17),
            Token(21, _) if true => Some(18),
            Token(22, _) if true => Some(19),
            Token(23, _) if true => Some(20),
            Token(24, _) if true => Some(21),
            Token(25, _) if true => Some(22),
            Token(26, _) if true => Some(23),
            Token(27, _) if true => Some(24),
            Token(28, _) if true => Some(25),
            Token(29, _) if true => Some(26),
            Token(30, _) if true => Some(27),
            Token(31, _) if true => Some(28),
            Token(32, _) if true => Some(29),
            Token(33, _) if true => Some(30),
            Token(34, _) if true => Some(31),
            Token(35, _) if true => Some(32),
            Token(36, _) if true => Some(33),
            Token(37, _) if true => Some(34),
            Token(38, _) if true => Some(35),
            Token(39, _) if true => Some(36),
            Token(40, _) if true => Some(37),
            Token(41, _) if true => Some(38),
            Token(42, _) if true => Some(39),
            Token(43, _) if true => Some(40),
            Token(44, _) if true => Some(41),
            Token(45, _) if true => Some(42),
            Token(46, _) if true => Some(43),
            Token(47, _) if true => Some(44),
            Token(48, _) if true => Some(45),
            Token(49, _) if true => Some(46),
            Token(50, _) if true => Some(47),
            Token(51, _) if true => Some(48),
            Token(52, _) if true => Some(49),
            Token(53, _) if true => Some(50),
            Token(54, _) if true => Some(51),
            Token(55, _) if true => Some(52),
            Token(56, _) if true => Some(53),
            Token(57, _) if true => Some(54),
            Token(58, _) if true => Some(55),
            Token(59, _) if true => Some(56),
            Token(60, _) if true => Some(57),
            Token(61, _) if true => Some(58),
            Token(62, _) if true => Some(59),
            Token(63, _) if true => Some(60),
            Token(64, _) if true => Some(61),
            Token(65, _) if true => Some(62),
            Token(66, _) if true => Some(63),
            Token(67, _) if true => Some(64),
            Token(68, _) if true => Some(65),
            Token(0, _) if true => Some(66),
            Token(1, _) if true => Some(67),
            Token(2, _) if true => Some(68),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        's,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 => match __token {
                Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) | Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(45, __tok0) | Token(46, __tok0) | Token(47, __tok0) | Token(48, __tok0) | Token(49, __tok0) | Token(50, __tok0) | Token(51, __tok0) | Token(52, __tok0) | Token(53, __tok0) | Token(54, __tok0) | Token(55, __tok0) | Token(56, __tok0) | Token(57, __tok0) | Token(58, __tok0) | Token(59, __tok0) | Token(60, __tok0) | Token(61, __tok0) | Token(62, __tok0) | Token(63, __tok0) | Token(64, __tok0) | Token(65, __tok0) | Token(66, __tok0) | Token(67, __tok0) | Token(68, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct InterpreterParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl InterpreterParser {
        pub fn new() -> InterpreterParser {
            let __builder = super::__intern_token::new_builder();
            InterpreterParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            's,
        >(
            &self,
            current: usize,
            vm: &mut VM,
            context: &'s mut Context,
            input: &'input str,
        ) -> Result<State, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    current,
                    vm,
                    context,
                    input,
                    __phantom: ::std::marker::PhantomData::<(&(), &())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> Option<Result<State,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            1 => {
                __reduce1(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            2 => {
                __reduce2(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            3 => {
                __reduce3(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            4 => {
                __reduce4(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            5 => {
                // __Interpreter = Interpreter => ActionFn(0);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(current, vm, context, input, __sym0);
                return Some(Ok(__nt));
            }
            6 => {
                __reduce6(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            7 => {
                __reduce7(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            8 => {
                __reduce8(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            9 => {
                __reduce9(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            10 => {
                __reduce10(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            11 => {
                __reduce11(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            12 => {
                __reduce12(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            13 => {
                __reduce13(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            14 => {
                __reduce14(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            15 => {
                __reduce15(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            16 => {
                __reduce16(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            17 => {
                __reduce17(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            18 => {
                __reduce18(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            19 => {
                __reduce19(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            20 => {
                __reduce20(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            21 => {
                __reduce21(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            22 => {
                __reduce22(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            23 => {
                __reduce23(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            24 => {
                __reduce24(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            25 => {
                __reduce25(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            26 => {
                __reduce26(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            27 => {
                __reduce27(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            28 => {
                __reduce28(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            29 => {
                __reduce29(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            30 => {
                __reduce30(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            31 => {
                __reduce31(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            32 => {
                __reduce32(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            33 => {
                // byte_label = "byte", name_string => ActionFn(172);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant7(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = match super::__action172::<>(current, vm, context, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (2, 9)
            }
            34 => {
                __reduce34(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            35 => {
                __reduce35(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            36 => {
                __reduce36(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            37 => {
                __reduce37(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            38 => {
                __reduce38(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            39 => {
                __reduce39(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            40 => {
                __reduce40(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            41 => {
                __reduce41(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            42 => {
                __reduce42(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            43 => {
                __reduce43(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            44 => {
                __reduce44(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            45 => {
                __reduce45(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            46 => {
                __reduce46(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            47 => {
                __reduce47(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            48 => {
                __reduce48(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            49 => {
                // call = "call", name_string => ActionFn(173);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant7(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = match super::__action173::<>(current, vm, context, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant2(__nt), __end));
                (2, 12)
            }
            50 => {
                __reduce50(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            51 => {
                __reduce51(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            52 => {
                __reduce52(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            53 => {
                __reduce53(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            54 => {
                __reduce54(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            55 => {
                __reduce55(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            56 => {
                __reduce56(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            57 => {
                __reduce57(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            58 => {
                __reduce58(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            59 => {
                __reduce59(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            60 => {
                // int = "int", u_byte_num => ActionFn(174);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant9(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = match super::__action174::<>(current, vm, context, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant2(__nt), __end));
                (2, 15)
            }
            61 => {
                __reduce61(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            62 => {
                __reduce62(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            63 => {
                __reduce63(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            64 => {
                __reduce64(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            65 => {
                __reduce65(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            66 => {
                __reduce66(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            67 => {
                __reduce67(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            68 => {
                __reduce68(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            69 => {
                __reduce69(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            70 => {
                __reduce70(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            71 => {
                __reduce71(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            72 => {
                __reduce72(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            73 => {
                __reduce73(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            74 => {
                __reduce74(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            75 => {
                __reduce75(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            76 => {
                __reduce76(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            77 => {
                __reduce77(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            78 => {
                __reduce78(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            79 => {
                __reduce79(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            80 => {
                __reduce80(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            81 => {
                __reduce81(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            82 => {
                __reduce82(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            83 => {
                __reduce83(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            84 => {
                // jumps_loops = jumps_condition, name_string => ActionFn(175);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant7(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = match super::__action175::<>(current, vm, context, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant2(__nt), __end));
                (2, 17)
            }
            85 => {
                __reduce85(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            86 => {
                __reduce86(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            87 => {
                __reduce87(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            88 => {
                __reduce88(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            89 => {
                __reduce89(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            90 => {
                __reduce90(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            91 => {
                __reduce91(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            92 => {
                __reduce92(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            93 => {
                __reduce93(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            94 => {
                __reduce94(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            95 => {
                __reduce95(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            96 => {
                __reduce96(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            97 => {
                __reduce97(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            98 => {
                // ret = "ret" => ActionFn(176);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action176::<>(current, vm, context, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant2(__nt), __end));
                (1, 22)
            }
            99 => {
                // s_word_num = r#"-[0-9]+"# => ActionFn(177);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action177::<>(current, vm, context, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (1, 23)
            }
            100 => {
                __reduce100(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            101 => {
                __reduce101(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            102 => {
                __reduce102(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            103 => {
                __reduce103(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            104 => {
                __reduce104(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            105 => {
                __reduce105(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            106 => {
                __reduce106(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            107 => {
                __reduce107(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            108 => {
                __reduce108(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            109 => {
                __reduce109(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            110 => {
                __reduce110(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            111 => {
                __reduce111(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            112 => {
                __reduce112(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            113 => {
                __reduce113(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            114 => {
                __reduce114(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            115 => {
                __reduce115(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            116 => {
                __reduce116(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            117 => {
                // u_byte_num = r#"[0-9]+"# => ActionFn(178);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action178::<>(current, vm, context, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant9(__nt), __end));
                (1, 26)
            }
            118 => {
                // u_word_num = r#"[0-9]+"# => ActionFn(179);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action179::<>(current, vm, context, input, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (1, 27)
            }
            119 => {
                __reduce119(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            120 => {
                __reduce120(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            121 => {
                __reduce121(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            122 => {
                __reduce122(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            123 => {
                // word_label = "word", name_string => ActionFn(180);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant7(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = match super::__action180::<>(current, vm, context, input, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (2, 29)
            }
            124 => {
                __reduce124(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            125 => {
                __reduce125(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            126 => {
                __reduce126(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            127 => {
                __reduce127(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            128 => {
                __reduce128(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            129 => {
                __reduce129(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            130 => {
                __reduce130(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            131 => {
                __reduce131(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            132 => {
                __reduce132(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            133 => {
                __reduce133(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            134 => {
                __reduce134(current, vm, context, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ByteReg, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, State, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, WordReg, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, bool, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, i16, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, u16, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, u8, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(134);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action134::<>(current, vm, context, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce1<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action133::<>(current, vm, context, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // Interpreter = control => ActionFn(1);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce3<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // Interpreter = transfer => ActionFn(2);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // Interpreter = bit_manipulation => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce6<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // base_index_reg_addr = base_reg_addr => ActionFn(125);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action125::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce7<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // base_index_reg_addr = index_reg_val => ActionFn(126);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action126::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // base_reg_addr = "bx" => ActionFn(127);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action127::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // base_reg_addr = "bp" => ActionFn(128);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action128::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce10<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, byte_reg, ",", byte_reg => ActionFn(135);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action135::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce11<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, word_reg, ",", word_reg => ActionFn(136);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action136::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce12<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, byte_reg, ",", "byte", memory_addr => ActionFn(137);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action137::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 6)
    }
    pub(crate) fn __reduce13<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, word_reg, ",", "word", memory_addr => ActionFn(138);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action138::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 6)
    }
    pub(crate) fn __reduce14<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, byte_reg, ",", byte_label => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce15<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, word_reg, ",", word_label => ActionFn(140);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action140::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce16<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, "byte", memory_addr, ",", byte_reg => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 6)
    }
    pub(crate) fn __reduce17<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, "word", memory_addr, ",", word_reg => ActionFn(142);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action142::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 6)
    }
    pub(crate) fn __reduce18<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, byte_label, ",", byte_reg => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce19<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, word_label, ",", word_reg => ActionFn(144);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action144::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce20<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, byte_reg, ",", u_byte_num => ActionFn(145);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action145::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce21<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, word_reg, ",", u_word_num => ActionFn(146);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action146::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce22<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, "byte", memory_addr, ",", u_byte_num => ActionFn(147);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action147::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 6)
    }
    pub(crate) fn __reduce23<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, "word", memory_addr, ",", u_word_num => ActionFn(148);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action148::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 6)
    }
    pub(crate) fn __reduce24<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = byte_binary_logical, byte_label, ",", u_byte_num => ActionFn(149);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action149::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce25<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // binary_logical = word_binary_logical, word_label, ",", u_word_num => ActionFn(150);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action150::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 6)
    }
    pub(crate) fn __reduce26<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // bit_manipulation = not => ActionFn(4);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce27<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // bit_manipulation = binary_logical => ActionFn(5);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce28<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // bit_manipulation = shift_rotate => ActionFn(6);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce29<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_binary_logical = "and" => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce30<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_binary_logical = "or" => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce31<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_binary_logical = "xor" => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce32<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_binary_logical = "test" => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce34<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "ah" => ActionFn(112);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action112::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce35<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "al" => ActionFn(113);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce36<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "bh" => ActionFn(114);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action114::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce37<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "bl" => ActionFn(115);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce38<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "ch" => ActionFn(116);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce39<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = reg_cl => ActionFn(117);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce40<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "dh" => ActionFn(118);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce41<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_reg = "dl" => ActionFn(119);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce42<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "sal" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce43<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "sar" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce44<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "shr" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce45<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "rol" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce46<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "ror" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce47<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "rcl" => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce48<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // byte_shift_rotate = "rcr" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce50<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "stc" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce51<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "clc" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce52<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "cmc" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce53<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "std" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce54<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "cld" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce55<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "sti" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce56<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "cli" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce57<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // control = "hlt" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce58<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // index_reg_val = "si" => ActionFn(129);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action129::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce59<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // index_reg_val = "di" => ActionFn(130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce61<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jmp" => ActionFn(70);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce62<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "ja" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce63<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jae" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce64<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jb" => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce65<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jbe" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce66<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jc" => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action75::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce67<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "je" => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce68<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jg" => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce69<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jge" => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce70<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jl" => ActionFn(79);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce71<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jle" => ActionFn(80);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce72<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jnc" => ActionFn(81);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce73<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jne" => ActionFn(82);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce74<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jno" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce75<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jnp" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce76<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jns" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce77<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jo" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce78<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jp" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce79<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "js" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce80<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "jcxz" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce81<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "loop" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce82<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "loope" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce83<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // jumps_condition = "loopne" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce85<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // memory_addr = "[", u_word_num, "]" => ActionFn(102);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action102::<>(current, vm, context, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce86<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // memory_addr = "[", base_index_reg_addr, "]" => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(current, vm, context, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce87<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // memory_addr = "[", base_reg_addr, ",", s_word_num, "]" => ActionFn(104);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action104::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 18)
    }
    pub(crate) fn __reduce88<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // memory_addr = "[", index_reg_val, ",", s_word_num, "]" => ActionFn(105);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action105::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (5, 18)
    }
    pub(crate) fn __reduce89<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // memory_addr = "[", base_reg_addr, ",", index_reg_val, ",", s_word_num, "]" => ActionFn(106);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant8(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action106::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (7, 18)
    }
    pub(crate) fn __reduce90<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // name_string = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(107);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce91<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // not = "not", byte_reg => ActionFn(7);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action7::<>(current, vm, context, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce92<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // not = "not", word_reg => ActionFn(8);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action8::<>(current, vm, context, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce93<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // not = "not", "byte", memory_addr => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9::<>(current, vm, context, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce94<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // not = "not", "word", memory_addr => ActionFn(10);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action10::<>(current, vm, context, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce95<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // not = "not", byte_label => ActionFn(11);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action11::<>(current, vm, context, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce96<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // not = "not", word_label => ActionFn(12);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action12::<>(current, vm, context, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce97<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // reg_cl = "cl" => ActionFn(120);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce100<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // s_word_num = u_word_num => ActionFn(111);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce101<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = byte_shift_rotate, byte_reg, ",", u_byte_num => ActionFn(157);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action157::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce102<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = byte_shift_rotate, byte_reg, ",", reg_cl => ActionFn(158);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action158::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce103<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = word_shift_rotate, word_reg, ",", u_byte_num => ActionFn(159);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action159::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce104<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = word_shift_rotate, word_reg, ",", reg_cl => ActionFn(160);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action160::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce105<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = byte_shift_rotate, "byte", memory_addr, ",", u_byte_num => ActionFn(161);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action161::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 24)
    }
    pub(crate) fn __reduce106<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = byte_shift_rotate, "byte", memory_addr, ",", reg_cl => ActionFn(162);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action162::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 24)
    }
    pub(crate) fn __reduce107<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = word_shift_rotate, "word", memory_addr, ",", u_byte_num => ActionFn(163);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action163::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 24)
    }
    pub(crate) fn __reduce108<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = word_shift_rotate, "word", memory_addr, ",", reg_cl => ActionFn(164);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant5(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action164::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (5, 24)
    }
    pub(crate) fn __reduce109<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = byte_shift_rotate, byte_label, ",", u_byte_num => ActionFn(165);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action165::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce110<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = word_shift_rotate, word_label, ",", u_byte_num => ActionFn(166);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action166::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce111<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = byte_shift_rotate, byte_label, ",", reg_cl => ActionFn(167);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action167::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce112<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // shift_rotate = word_shift_rotate, word_label, ",", reg_cl => ActionFn(168);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action168::<>(current, vm, context, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce113<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // transfer = call => ActionFn(63);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce114<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // transfer = ret => ActionFn(64);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce115<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // transfer = jumps_loops => ActionFn(65);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce116<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // transfer = int => ActionFn(66);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce119<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_binary_logical = "and" => ActionFn(33);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce120<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_binary_logical = "or" => ActionFn(34);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action34::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce121<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_binary_logical = "xor" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce122<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_binary_logical = "test" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce124<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_reg = "ax" => ActionFn(121);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce125<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_reg = "bx" => ActionFn(122);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce126<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_reg = "cx" => ActionFn(123);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action123::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce127<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_reg = "dx" => ActionFn(124);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action124::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce128<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "sal" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce129<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "sar" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce130<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "shr" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce131<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "rol" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce132<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "ror" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce133<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "rcl" => ActionFn(61);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce134<
        'input,
        's,
    >(
        current: usize,
        vm: &mut VM,
        context: &'s mut Context,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'s ())>,
    ) -> (usize, usize)
    {
        // word_shift_rotate = "rcr" => ActionFn(62);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62::<>(current, vm, context, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 31)
    }
}
pub use self::__parse__Interpreter::InterpreterParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use crate::util::interpreter_util::*;
    use crate::util::preprocessor_util::LabelType;
    use crate::util::flag_util::*;
    use crate::util::data_util::*;
    use crate::util::address::*;
    use crate::arch::FLAG_CARRY;
    use crate::vm::VM;
    use crate::error;
    use lalrpop_util::ParseError;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("^(\\-[0-9]+)", false),
            ("^([0-9]+)", false),
            ("^([A-Z_a-z][0-9A-Z_a-z]*)", false),
            ("^(,)", false),
            ("^(\\[)", false),
            ("^(\\])", false),
            ("^(ah)", false),
            ("^(al)", false),
            ("^(and)", false),
            ("^(ax)", false),
            ("^(bh)", false),
            ("^(bl)", false),
            ("^(bp)", false),
            ("^(bx)", false),
            ("^(byte)", false),
            ("^(call)", false),
            ("^(ch)", false),
            ("^(cl)", false),
            ("^(clc)", false),
            ("^(cld)", false),
            ("^(cli)", false),
            ("^(cmc)", false),
            ("^(cx)", false),
            ("^(dh)", false),
            ("^(di)", false),
            ("^(dl)", false),
            ("^(dx)", false),
            ("^(hlt)", false),
            ("^(int)", false),
            ("^(ja)", false),
            ("^(jae)", false),
            ("^(jb)", false),
            ("^(jbe)", false),
            ("^(jc)", false),
            ("^(jcxz)", false),
            ("^(je)", false),
            ("^(jg)", false),
            ("^(jge)", false),
            ("^(jl)", false),
            ("^(jle)", false),
            ("^(jmp)", false),
            ("^(jnc)", false),
            ("^(jne)", false),
            ("^(jno)", false),
            ("^(jnp)", false),
            ("^(jns)", false),
            ("^(jo)", false),
            ("^(jp)", false),
            ("^(js)", false),
            ("^(loop)", false),
            ("^(loope)", false),
            ("^(loopne)", false),
            ("^(not)", false),
            ("^(or)", false),
            ("^(rcl)", false),
            ("^(rcr)", false),
            ("^(ret)", false),
            ("^(rol)", false),
            ("^(ror)", false),
            ("^(sal)", false),
            ("^(sar)", false),
            ("^(shr)", false),
            ("^(si)", false),
            ("^(stc)", false),
            ("^(std)", false),
            ("^(sti)", false),
            ("^(test)", false),
            ("^(word)", false),
            ("^(xor)", false),
            (r"^(\s*)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
fn __action0<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action1<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action2<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action3<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, (), usize),
) -> State
{
    State::NEXT
}

#[allow(unused_variables)]
fn __action4<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, (), usize),
) -> ()
{
    ()
}

#[allow(unused_variables)]
fn __action5<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, (), usize),
) -> ()
{
    ()
}

#[allow(unused_variables)]
fn __action6<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, (), usize),
) -> ()
{
    ()
}

#[allow(unused_variables)]
fn __action7<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, ByteReg, usize),
) -> ()
{
    {
      let v = get_byte_reg(vm,r);
      set_byte_reg(vm,r,!v);
   }
}

#[allow(unused_variables)]
fn __action8<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, WordReg, usize),
) -> ()
{
    {
      let v = get_word_reg_mut(vm,r);
      *v = !*v;
   }
}

#[allow(unused_variables)]
fn __action9<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
      vm.mem[m] = !vm.mem[m];
   }
}

#[allow(unused_variables)]
fn __action10<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
      let mut temp:u16 = vm.mem[m] as u16;
      temp |= (vm.mem[inc_addr(m,1)] as u16) << 8;
      temp = !temp;
      let (hb,lb) = separate_bytes(temp as i16);
      vm.mem[m] = lb;
      vm.mem[inc_addr(m,1)] = hb;
   }
}

#[allow(unused_variables)]
fn __action11<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
      vm.mem[m] = !vm.mem[m];
   }
}

#[allow(unused_variables)]
fn __action12<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
      let mut temp:u16 = vm.mem[m] as u16;
      temp |= (vm.mem[inc_addr(m,1)] as u16) << 8;
      temp = !temp;
      let (hb,lb) = separate_bytes(temp as i16);
      vm.mem[m] = lb;
      vm.mem[inc_addr(m,1)] = hb;
   }
}

#[allow(unused_variables)]
fn __action13<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, r1, _): (usize, ByteReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r2, _): (usize, ByteReg, usize),
) -> ()
{
    {
        let dest = get_byte_reg(vm,r1);
        let src = get_byte_reg(vm,r2);
        let res = f(vm,dest,src);
        set_byte_reg(vm,r1,res);
    }
}

#[allow(unused_variables)]
fn __action14<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, r1, _): (usize, WordReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r2, _): (usize, WordReg, usize),
) -> ()
{
    {
        // as f requires mut , we cannot use get_word_reg_val
        // so first take both values and set destination value
        let dest = get_word_reg_val(vm,r1);
        let src = get_word_reg_val(vm,r2);
        let res = f(vm,dest,src);
        set_word_reg_val(vm,r1,res);
    }
}

#[allow(unused_variables)]
fn __action15<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, r, _): (usize, ByteReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
        let dest = get_byte_reg(vm,r);
        let src = vm.mem[m];
        let res = f(vm,dest,src);
        set_byte_reg(vm,r,res);
    }
}

#[allow(unused_variables)]
fn __action16<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, r, _): (usize, WordReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
        let dest = get_word_reg_val(vm,r);
        let src = vm.mem[m] as u16 | (vm.mem[inc_addr(m,1)] as u16) << 8;
        let res = f(vm,dest,src);
        set_word_reg_val(vm,r,res);
    }
}

#[allow(unused_variables)]
fn __action17<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, r, _): (usize, ByteReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
        let dest = get_byte_reg(vm,r);
        let src = vm.mem[m];
        let res = f(vm,dest,src);
        set_byte_reg(vm,r,res);
    }
}

#[allow(unused_variables)]
fn __action18<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, r, _): (usize, WordReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
) -> ()
{
    {
        let dest = get_word_reg_val(vm,r);
        let src = vm.mem[m] as u16 | (vm.mem[inc_addr(m,1)] as u16) << 8;
        let res = f(vm,dest,src);
        set_word_reg_val(vm,r,res);
    }
}

#[allow(unused_variables)]
fn __action19<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, ByteReg, usize),
) -> ()
{
    {
        let dest = vm.mem[m];
        let src = get_byte_reg(vm,r);
        let res = f(vm,dest,src);
        vm.mem[m] = res;
    }
}

#[allow(unused_variables)]
fn __action20<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, WordReg, usize),
) -> ()
{
    {
        let dest = vm.mem[m] as u16 | (vm.mem[inc_addr(m,1)] as u16) << 8;
        let src = get_word_reg_val(vm,r);
        let res = f(vm,dest,src);
        let (hb,lb) = separate_bytes(res as i16);
        vm.mem[m] = lb;
        vm.mem[inc_addr(m,1)] = hb;
    }
}

#[allow(unused_variables)]
fn __action21<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, ByteReg, usize),
) -> ()
{
    {
        let dest = vm.mem[m];
        let src = get_byte_reg(vm,r);
        let res = f(vm,dest,src);
        vm.mem[m] = res;
    }
}

#[allow(unused_variables)]
fn __action22<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, WordReg, usize),
) -> ()
{
    {
        let dest = vm.mem[m] as u16 | (vm.mem[inc_addr(m,1)] as u16) << 8;
        let src = get_word_reg_val(vm,r);
        let res = f(vm,dest,src);
        let (hb,lb) = separate_bytes(res as i16);
        vm.mem[m] = lb;
        vm.mem[inc_addr(m,1)] = hb;
    }
}

#[allow(unused_variables)]
fn __action23<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, r, _): (usize, ByteReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        let dest = get_byte_reg(vm,r);
        let src = n;
        let res = f(vm,dest,src);
        set_byte_reg(vm,r,res);
    }
}

#[allow(unused_variables)]
fn __action24<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, r, _): (usize, WordReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u16, usize),
) -> ()
{
    {
        let dest = get_word_reg_val(vm,r);
        let src = n;
        let res = f(vm,dest,src);
        set_word_reg_val(vm,r,res);
    }
}

#[allow(unused_variables)]
fn __action25<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        let dest = vm.mem[m];
        let src = n;
        let res = f(vm,dest,src);
        vm.mem[m] = res;
    }
}

#[allow(unused_variables)]
fn __action26<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u16, usize),
) -> ()
{
    {
        let dest = vm.mem[m] as u16 | (vm.mem[inc_addr(m,1)] as u16) << 8;
        let src = n;
        let res = f(vm,dest,src);
        let (hb,lb) = separate_bytes(res as i16);
        vm.mem[m] = lb;
        vm.mem[inc_addr(m,1)] = hb;
    }
}

#[allow(unused_variables)]
fn __action27<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        let dest = vm.mem[m];
        let src = n;
        let res = f(vm,dest,src);
        vm.mem[m] = res;
    }
}

#[allow(unused_variables)]
fn __action28<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u16, usize),
) -> ()
{
    {
        let dest = vm.mem[m] as u16 | (vm.mem[inc_addr(m,1)] as u16) << 8;
        let src = n;
        let res = f(vm,dest,src);
        let (hb,lb) = separate_bytes(res as i16);
        vm.mem[m] = lb;
        vm.mem[inc_addr(m,1)] = hb;
    }
}

#[allow(unused_variables)]
fn __action29<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm:&mut VM,dest:u8,source:u8| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest & source;
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res ==0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action30<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm:&mut VM,dest:u8,source:u8| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);

            let res = dest | source;
            
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res ==0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action31<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm:&mut VM,dest:u8,source:u8| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest ^ source;
            
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res ==0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action32<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm:&mut VM,dest:u8,source:u8| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest & source;
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res ==0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return dest;
        })
    }
}

#[allow(unused_variables)]
fn __action33<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm:&mut VM,dest:u16,source:u16| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest & source;
            if res >= 1<<15 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action34<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm:&mut VM,dest:u16,source:u16| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest | source;
            if res >= 1<<15 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action35<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm:&mut VM,dest:u16,source:u16| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest ^ source;

            if res >= 1<<15 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action36<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm:&mut VM,dest:u16,source:u16| {
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
            unset_flag(&mut vm.arch.flag,Flags::CARRY);
            
            let res = dest & source;
            if res >= 1<<15 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return dest;
        })
    }
}

#[allow(unused_variables)]
fn __action37<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, r, _): (usize, ByteReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action38<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, r, _): (usize, ByteReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ByteReg, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action39<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, r, _): (usize, WordReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action40<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, r, _): (usize, WordReg, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ByteReg, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action41<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action42<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ByteReg, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action43<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action44<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ByteReg, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action45<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action46<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action47<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ByteReg, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action48<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, f, _): (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    (_, m, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ByteReg, usize),
) -> ()
{
    {
        
    }
}

#[allow(unused_variables)]
fn __action49<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{
            let res:u8;
            if num > 9 {
                // kind of optimization, as shifting byte number more than 8 times, it will become zero
                res = 0;
                unset_flag(&mut vm.arch.flag,Flags::CARRY);
            }else{
                let t = (val as u16) << num;
                if t & 1 << 8 == 1 << 8{
                    set_flag(&mut vm.arch.flag,Flags::CARRY);
                }else{
                    unset_flag(&mut vm.arch.flag,Flags::CARRY);
                }
                res = t as u8;
                if val & 1<<7 == res & 1 << 7 { // if sign bit is same as next bit
                    unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
                }else{
                    set_flag(&mut vm.arch.flag,Flags::OVERFLOW);
                }
            }
            
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action50<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{
            let mut res:u8;
            
            let msb = val & 1<<7;

            if num > 9 {
                // kind of optimization, as shifting byte number more than 8 times, it will become zero
                if msb !=0{
                    res = u8::MAX;
                    set_flag(&mut vm.arch.flag,Flags::CARRY);
                }else{
                    res = 0;
                    unset_flag(&mut vm.arch.flag,Flags::CARRY);
                }
            }else{
                res = val;
                for _ in 0..num{
                    res = (res >> 1) | msb;
                }
                if res & 1 == 1 {
                    set_flag(&mut vm.arch.flag,Flags::CARRY);
                }else{
                    unset_flag(&mut vm.arch.flag,Flags::CARRY);
                }
            }
            unset_flag(&mut vm.arch.flag,Flags::OVERFLOW); // always clear overflow
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action51<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{
            let res:u8;
            if num > 9 {
                // kind of optimization, as shifting byte number more than 8 times, it will become zero
                res = 0;
            }else{
                if val & 1<<7 == 0 { // if sign bit retains its value
                    unset_flag(&mut vm.arch.flag,Flags::OVERFLOW);
                }else{
                    set_flag(&mut vm.arch.flag,Flags::OVERFLOW);
                }
                
                let t = (val as u16) >> num;
                if t & 1 == 1 {
                    set_flag(&mut vm.arch.flag,Flags::CARRY);
                }else{
                    unset_flag(&mut vm.arch.flag,Flags::CARRY);
                }
                res = t as u8;
            }
            if res >= 1<<7 {
                set_flag(&mut vm.arch.flag,Flags::SIGN);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::SIGN);
            }
            if res == 0 {
                set_flag(&mut vm.arch.flag,Flags::ZERO);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::ZERO);
            }
            if has_even_parity(res as u16){
                set_flag(&mut vm.arch.flag,Flags::PARITY);
            }else{
                unset_flag(&mut vm.arch.flag,Flags::PARITY);
            }
            return res;
        })
    }
}

#[allow(unused_variables)]
fn __action52<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action53<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action54<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action55<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u8, u8) -> u8>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action56<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action57<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action58<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action59<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action60<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action61<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action62<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<dyn Fn(&mut VM, u16, u16) -> u16>
{
    {
        Box::new(|vm,val,num|{0})
    }
}

#[allow(unused_variables)]
fn __action63<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action64<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action65<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action66<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, State, usize),
) -> State
{
    __0
}

#[allow(unused_variables)]
fn __action67<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, String, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
       match context.fn_map.get(&n){
         Some(pos) => {context.call_stack.push(current); Ok(State::JMP(*pos)) },
         None => error!(start,end,format!("Internal Error : call to undefined procedure {}",n))
       }
    }
}

#[allow(unused_variables)]
fn __action68<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
      match context.call_stack.pop() {
         Some(p) => {Ok(State::JMP(p))},
         None => error!(start,end,"Error : ret is encountered without corresponding call".to_owned())
      }
   }
}

#[allow(unused_variables)]
fn __action69<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, take, _): (usize, bool, usize),
    (_, n, _): (usize, String, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
       match context.label_map.get(&n){

          Some(l) => {

             match l.get_type(){
               
               LabelType::DATA => error!(start,end,format!("Internal Error : jump to data type label {}",n)),
               
               LabelType::CODE => {
                  if take {
                     Ok(State::JMP(l.map))
                  }else{
                     Ok(State::NEXT)
                  }
               }
             }
          }
          // No label found
          None => error!(start,end,format!("Internal Error : jump to undefined label {}",n))
       }
    }
}

#[allow(unused_variables)]
fn __action70<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    true
}

#[allow(unused_variables)]
fn __action71<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::CARRY) && !get_flag_state(vm.arch.flag,Flags::ZERO)
}

#[allow(unused_variables)]
fn __action72<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::CARRY)
}

#[allow(unused_variables)]
fn __action73<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::CARRY)
}

#[allow(unused_variables)]
fn __action74<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::CARRY) || get_flag_state(vm.arch.flag,Flags::ZERO)
}

#[allow(unused_variables)]
fn __action75<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::CARRY)
}

#[allow(unused_variables)]
fn __action76<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::ZERO)
}

#[allow(unused_variables)]
fn __action77<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::ZERO) && get_flag_state(vm.arch.flag,Flags::SIGN) == get_flag_state(vm.arch.flag,Flags::OVERFLOW)
}

#[allow(unused_variables)]
fn __action78<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::SIGN) == get_flag_state(vm.arch.flag,Flags::OVERFLOW)
}

#[allow(unused_variables)]
fn __action79<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::SIGN) != get_flag_state(vm.arch.flag,Flags::OVERFLOW)
}

#[allow(unused_variables)]
fn __action80<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::ZERO) && get_flag_state(vm.arch.flag,Flags::SIGN) != get_flag_state(vm.arch.flag,Flags::OVERFLOW)
}

#[allow(unused_variables)]
fn __action81<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::CARRY)
}

#[allow(unused_variables)]
fn __action82<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::ZERO)
}

#[allow(unused_variables)]
fn __action83<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::OVERFLOW)
}

#[allow(unused_variables)]
fn __action84<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::PARITY)
}

#[allow(unused_variables)]
fn __action85<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    !get_flag_state(vm.arch.flag,Flags::SIGN)
}

#[allow(unused_variables)]
fn __action86<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::OVERFLOW)
}

#[allow(unused_variables)]
fn __action87<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::PARITY)
}

#[allow(unused_variables)]
fn __action88<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    get_flag_state(vm.arch.flag,Flags::SIGN)
}

#[allow(unused_variables)]
fn __action89<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    vm.arch.cx == 0
}

#[allow(unused_variables)]
fn __action90<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    {
      vm.arch.cx = (vm.arch.cx as i32 -1) as u16;
      vm.arch.cx != 0
   }
}

#[allow(unused_variables)]
fn __action91<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    {
      vm.arch.cx = (vm.arch.cx as i32 -1) as u16;
      vm.arch.cx != 0 && get_flag_state(vm.arch.flag,Flags::ZERO)
   }
}

#[allow(unused_variables)]
fn __action92<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> bool
{
    {
      vm.arch.cx = (vm.arch.cx as i32 -1) as u16;
      vm.arch.cx != 0 && !get_flag_state(vm.arch.flag,Flags::ZERO)
   }
}

#[allow(unused_variables)]
fn __action93<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u8, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
        if n==3 || n == 0x10 || n == 0x21{
            Ok(State::INT(n))
        }else{
            error!(start,end,format!("Internal Error : int does not support {}",n))
        }
        
    }
}

#[allow(unused_variables)]
fn __action94<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {set_flag(&mut vm.arch.flag,Flags::CARRY); State::NEXT}
}

#[allow(unused_variables)]
fn __action95<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {unset_flag(&mut vm.arch.flag,Flags::CARRY); State::NEXT}
}

#[allow(unused_variables)]
fn __action96<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {if (vm.arch.flag & FLAG_CARRY) != 0 {vm.arch.flag &= !FLAG_CARRY}else{vm.arch.flag |= FLAG_CARRY}; State::NEXT}
}

#[allow(unused_variables)]
fn __action97<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {set_flag(&mut vm.arch.flag,Flags::DIRECTION); State::NEXT}
}

#[allow(unused_variables)]
fn __action98<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {unset_flag(&mut vm.arch.flag,Flags::DIRECTION); State::NEXT}
}

#[allow(unused_variables)]
fn __action99<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {set_flag(&mut vm.arch.flag,Flags::INTERRUPT); State::NEXT}
}

#[allow(unused_variables)]
fn __action100<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    {unset_flag(&mut vm.arch.flag,Flags::INTERRUPT); State::NEXT}
}

#[allow(unused_variables)]
fn __action101<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> State
{
    State::HALT
}

#[allow(unused_variables)]
fn __action102<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, u16, usize),
    (_, _, _): (usize, &'input str, usize),
) -> usize
{
    Address::calculate_from_offset(vm.arch.ds,n)
}

#[allow(unused_variables)]
fn __action103<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
) -> usize
{
    r
}

#[allow(unused_variables)]
fn __action104<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, i16, usize),
    (_, _, _): (usize, &'input str, usize),
) -> usize
{
    make_valid_address((r as i32 + n as i32) as usize)
}

#[allow(unused_variables)]
fn __action105<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, i16, usize),
    (_, _, _): (usize, &'input str, usize),
) -> usize
{
    make_valid_address((Address::calculate_from_offset(vm.arch.ds,r) as i32 + n as i32) as usize)
}

#[allow(unused_variables)]
fn __action106<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, b, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, k, _): (usize, i16, usize),
    (_, _, _): (usize, &'input str, usize),
) -> usize
{
    make_valid_address(((b+i) as i32 + k as i32) as usize)
}

#[allow(unused_variables)]
fn __action107<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, v, _): (usize, &'input str, usize),
) -> String
{
    {
        v.to_owned()
    }
}

#[allow(unused_variables)]
fn __action108<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, n, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<u8,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
        match u8::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => error!(start,end,"Internal Error : Invalid Value, must be between 0-255".to_owned())
        }
    }
}

#[allow(unused_variables)]
fn __action109<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, n, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<u16,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
        match u16::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => error!(start,end,"Internal Error : Invalid Value, must be between 0-65535".to_owned())
        }
    }
}

#[allow(unused_variables)]
fn __action110<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, n, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<i16,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
        match i16::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => error!(start,end,"Internal Error : Invalid Value, must be between 0-65535".to_owned())
        }
    }
}

#[allow(unused_variables)]
fn __action111<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, n, _): (usize, u16, usize),
) -> i16
{
    n as i16
}

#[allow(unused_variables)]
fn __action112<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::AH
}

#[allow(unused_variables)]
fn __action113<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::AL
}

#[allow(unused_variables)]
fn __action114<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::BH
}

#[allow(unused_variables)]
fn __action115<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::BL
}

#[allow(unused_variables)]
fn __action116<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::CH
}

#[allow(unused_variables)]
fn __action117<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, ByteReg, usize),
) -> ByteReg
{
    __0
}

#[allow(unused_variables)]
fn __action118<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::DH
}

#[allow(unused_variables)]
fn __action119<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::DL
}

#[allow(unused_variables)]
fn __action120<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ByteReg
{
    ByteReg::CL
}

#[allow(unused_variables)]
fn __action121<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> WordReg
{
    WordReg::AX
}

#[allow(unused_variables)]
fn __action122<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> WordReg
{
    WordReg::BX
}

#[allow(unused_variables)]
fn __action123<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> WordReg
{
    WordReg::CX
}

#[allow(unused_variables)]
fn __action124<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> WordReg
{
    WordReg::DX
}

#[allow(unused_variables)]
fn __action125<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, usize, usize),
) -> usize
{
    __0
}

#[allow(unused_variables)]
fn __action126<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, v, _): (usize, usize, usize),
) -> usize
{
    Address::calculate_from_offset(vm.arch.ds,v)
}

#[allow(unused_variables)]
fn __action127<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> usize
{
    Address::calculate_from_offset(vm.arch.ds,vm.arch.bx)
}

#[allow(unused_variables)]
fn __action128<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> usize
{
    Address::calculate_from_offset(vm.arch.ss,vm.arch.bp)
}

#[allow(unused_variables)]
fn __action129<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> usize
{
    vm.arch.si as usize
}

#[allow(unused_variables)]
fn __action130<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> usize
{
    vm.arch.di as usize
}

#[allow(unused_variables)]
fn __action131<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, String, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<usize,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
        match context.label_map.get(&n){
            None => {return error!(start,end,format!("Internal Error : Label {} not defined",n));},
            Some(l) => {
                match l.get_type() {
                    LabelType::CODE => {return error!(start,end,format!("Internal Error : Cannot use Code label {}",n));}
                    LabelType::DATA =>{return Ok(Address::calculate_from_offset(vm.arch.ds,l.map));}
                }
            } 
        } 
    }
}

#[allow(unused_variables)]
fn __action132<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, n, _): (usize, String, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<usize,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    {
        match context.label_map.get(&n){
            None => {return error!(start,end,format!("Internal Error : Label {} not defined",n));},
            Some(l) => {
                match l.get_type() {
                    LabelType::CODE => {return error!(start,end,format!("Internal Error : Cannot use Code label {}  ",n));}
                    LabelType::DATA =>{return Ok(Address::calculate_from_offset(vm.arch.ds,l.map));}
                }
            } 
        } 
    }
}

#[allow(unused_variables)]
fn __action133<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action134<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action135<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, ByteReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action136<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, WordReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, WordReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action137<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, ByteReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action138<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, WordReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, usize, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action16(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action139<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, ByteReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action140<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, WordReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, usize, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action141<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action19(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action142<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, WordReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action20(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action143<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action144<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, WordReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action22(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action145<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, ByteReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action146<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, WordReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u16, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action147<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action25(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action148<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, u16, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action149<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action150<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u16, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action28(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action151<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, usize, usize),
) -> Result<usize,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action152<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action153<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, u8, usize),
    __2: (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action154<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, bool, usize),
    __1: (usize, String, usize),
    __2: (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action155<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action156<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<i16,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action110(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action157<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, ByteReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action158<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, ByteReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action38(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action159<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, WordReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action160<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, WordReg, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action40(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action161<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action41(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action162<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action42(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action163<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action43(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action164<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action44(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action165<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action166<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, u8, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action167<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u8, u8) -> u8>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action47(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action168<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, Box<dyn Fn(&mut VM, u16, u16) -> u16>, usize),
    __1: (usize, usize, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ByteReg, usize),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action169<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<u8,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action108(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action170<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<u16,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action109(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action171<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
    __2: (usize, usize, usize),
) -> Result<usize,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action134(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        current,
        vm,
        context,
        input,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action172<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
) -> Result<usize,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        current,
        vm,
        context,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action173<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        current,
        vm,
        context,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action174<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, u8, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        current,
        vm,
        context,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action175<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, bool, usize),
    __1: (usize, String, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action154(
        current,
        vm,
        context,
        input,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action176<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<State,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        current,
        vm,
        context,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action177<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<i16,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        current,
        vm,
        context,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action178<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<u8,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action169(
        current,
        vm,
        context,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action179<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Result<u16,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action170(
        current,
        vm,
        context,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action180<
    'input,
    's,
>(
    current: usize,
    vm: &mut VM,
    context: &'s mut Context,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, String, usize),
) -> Result<usize,__lalrpop_util::ParseError<usize,Token<'input>,&'static str>>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action133(
        current,
        vm,
        context,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        current,
        vm,
        context,
        input,
        __0,
        __1,
        __temp0,
    )
}

pub trait __ToTriple<'input, 's, > {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>;
}

impl<'input, 's, > __ToTriple<'input, 's, > for (usize, Token<'input>, usize) {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, 's, > __ToTriple<'input, 's, > for Result<(usize, Token<'input>, usize), &'static str> {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
