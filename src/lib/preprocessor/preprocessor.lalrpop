use crate::util::preprocessor_util as util;
use util::{Label,LabelType,MB};
use regex::{Regex,Captures};
use crate::preprocessor_error;
use lalrpop_util::ParseError;



// NOTES
// quote_ tokens are used for creating case ignoring names, as r"(capital case|small case)" generates ambiguity
//      if not this, either manually implement both with same code, else try r"(capital case|small case) " (with space)
//      but that can have issues as well
//
// name_string is a string that can be used for macro, function or label name, must start with _ or alphabet
// general_string is string that accepts name_string, number

grammar<'s>(context:&'s mut util::Context,out:&'s mut util::Output);

pub Code:() = {
    data_directives,
    code_directives,
    opcodes,
    procedure,
    print_stmt,
    Code code_directives,
    Code opcodes,
    Code procedure,
    Code print_stmt,
}

// ---------------------------------------------------------------------------------------------

// Assembler Data Directives

// Collective of all data directives
pub data_directives:() = {
    set_directive,
    db_directive,
    dw_directive,
    data_directives set_directive,
    data_directives db_directive,
    data_directives dw_directive,
}

// Set directive : used to set the DS value manually
set_directive:() = {
    quote_set <n:word_num> => {
        out.data.push(format!("set {}",n));
    }
}

quote_set:()={
    "set",
    "SET"
}

// DB directive
db_directive:() = {
    // Set single value
    <start:@L> <l:label?> quote_db <n:byte_num> =>{
        if let Some(l) = l{
            context.label_map.insert(l,Label::new(LabelType::DATA,start as u16,context.data_counter));
        }
        out.data.push(format!("db {}",n));
        // Increment the data counter
        context.data_counter += 1;
    },
    // Set array value initialized to 0
    <start:@L> <l:label?> quote_db "["<n:word_num>"]" =>{
        if let Some(l) =l{
            context.label_map.insert(l,Label::new(LabelType::DATA,start as u16,context.data_counter));
        }
        out.data.push(format!("db [{}]",n));
        // Increment the data counter
        context.data_counter += n;
    },
    // Set array value initialized to value
    <start:@L> <l:label?> quote_db "["<n:word_num> ";" <v:byte_num>"]" =>{
        if let Some(l) = l{
            context.label_map.insert(l,Label::new(LabelType::DATA,start as u16,context.data_counter));
        }
        out.data.push(format!("db [{} ; {}]",n,v));
        // Increment the data counter
        context.data_counter += n;
    },
}

quote_db:() = {
    "DB",
    "db",
}

// DW directive
dw_directive:() = {
    // Set single value
    <start:@L> <l:label?> quote_dw <n:word_num> =>{
        if let Some(l) = l{
            context.label_map.insert(l,Label::new(LabelType::DATA,start as u16,context.data_counter));
        }
        out.data.push(format!("dw {}",n));
        // Increment the data counter
        context.data_counter += 2;
    },
    // Set array value initialized to 0
    <start:@L> <l:label?> quote_dw "["<n:word_num>"]" =>{
        if let Some(l) = l{
            context.label_map.insert(l,Label::new(LabelType::DATA,start as u16,context.data_counter));
        }
        out.data.push(format!("dw [{}]",n));
        // Increment the data counter
        context.data_counter += 2*n;
    },
    // Set array value initialized to value
    <start:@L> <l:label?> quote_dw "["<n:word_num> ";" <v:word_num>"]" =>{
        if let Some(l) =l{
            context.label_map.insert(l,Label::new(LabelType::DATA,start as u16,context.data_counter));
        }
        out.data.push(format!("dw [{} ; {}]",n,v));
        // Increment the data counter
        context.data_counter += 2*n;
    },
}

quote_dw:() = {
    "dw",
    "DW"
}


// ---------------------------------------------------------------------------------------------

// Assembler code Directives

// Collective of all code directives
pub code_directives:() = {
    macro_def,
    macro_use,
}

// As lalrpop does not support optional token, and makes it an ambiguity error 
// if we use r"(MACRO|macro)" we will have to use this double declaration :(
// Closing bracket is counted and removed in raw_code
pub macro_def:() = {
    quote_macro <name:name_string> "(" <params:CommaSepList<name_string>> ")" "->"  <s:r"[_a-zA-Z0-9 \[\]]*<-"> =>{
        let mut r =s[0..s.len()-2].to_owned();
        // maybe try making single regex of all params and replace, somehow
        for (i,p) in params.iter().enumerate(){
            let pat = format!(r"\b{}\b",p);
            let re = Regex::new(&pat).unwrap();
            r = re.replace_all(&r,|caps:&Captures|{
                format!("{{{}}}",i)
            }).to_string();
        }
        context.macro_map.insert(name,r);
    }
}

quote_macro:()={
    "MACRO",
    "macro"
}


macro_use:() = {
    <start:@L> <l:r"[_a-zA-Z][_a-zA-Z0-9]*"> "(" <params:CommaSepList<general_string>> ")" <end:@R> =>? {
        match context.macro_map.get(l){
            Some(value)=>{
                let mut r = value.clone();
                // TODO Maybe optimise this later
                // maybe try making single regex of all params and replace, somehow
                for (i,p) in params.iter().enumerate(){
                    let pat = format!("{{{}}}",i);
                    r = r.replace(&pat,&p);
                }
                
                let p = CodeParser::new();
                context.mapper.set_source(start);
                context.mapper.lock_source();
                let o = p.parse(context,out,&r);
                context.mapper.unlock_source();
                match o{
                    Ok(_)=>Ok(()),
                    Err(e)=>{
                        // TODO better format error, maybe send the error position in formatted string as well?
                        preprocessor_error!(start,end,l,"Error in macro expansion".to_owned())
                    }
                }
            },
            None => preprocessor_error!(start as usize,start +l.len(),l,"Macro not defined".to_owned()),
        }
    }
}

// TODO def procedure

pub procedure:() = {
    <start:@L> proc_def "{" proc_contents "}" <end:@R> =>{
        out.code.push("ret".to_owned());
        context.mapper.add_entry(end);
    }
}

proc_def:() = {
    <start:@L> quote_proc <n:name_string> <end:@R> =>? {
        match context.fn_map.get(&n){
            Some(_) => preprocessor_error!(start,end,"",format!("Procedure {} already declared",n)),
            None => {context.fn_map.insert(n,out.code.len());Ok(())}
        }
    }
}

proc_contents:() = {
    opcodes,
    macro_use,
    proc_contents opcodes,
    proc_contents macro_use,
}

quote_proc:()={
    "def",
    "DEF"
}

// Offset is along with num

print_stmt:() = {
    <start:@L> quote_print quote_flags => {
        out.code.push("print flags".to_owned());
        context.mapper.add_entry(start);
    },
    <start:@L>  quote_print quote_reg => {
        out.code.push("print reg".to_owned());
        context.mapper.add_entry(start);
    },
    <start:@L> quote_print quote_mem <s:raw_addr> "->" <e:raw_addr> => {
        out.code.push(format!("print mem {} -> {}",s,e));
        context.mapper.add_entry(start);
    },
    <start:@L> quote_print quote_mem <s:raw_addr> ":" <e:raw_addr> => {
        out.code.push(format!("print mem {} : {}",s,e));
        context.mapper.add_entry(start);
    },
    <start:@L> quote_print quote_mem  ":" <o:raw_addr> => {
        out.code.push(format!("print mem : {}",o));
        context.mapper.add_entry(start);
    },
}

quote_print:() = {
    "PRINT",
    "print"
}

quote_flags:() = {
    "FLAGS",
    "flags"
}

quote_reg:() = {
    "REG",
    "reg"
}

quote_mem:() = {
    "MEM",
    "mem"
}

// ---------------------------------------------------------------------------------------------


// Assembler opcodes
opcodes:()={
    control,
    transfer,
    bit_manipulation,
}

// ----------------------------------
// Bit Manipulation Instructions

bit_manipulation:() = {
    not,
    binary_logical,
    shift_rotate,
}

 not:()={
    <start:@L> quote_not <r:gen_reg> =>{
        out.code.push(format!("not {}",r));
        context.mapper.add_entry(start);
    },
    <start:@L> quote_not <m:memory_addr> =>{
        out.code.push(format!("not {}",m));
        context.mapper.add_entry(start);
    },
    <start:@L> quote_not <m:word_label> =>{
        out.code.push(format!("not word {}",m));
        context.mapper.add_entry(start);
    },
    <start:@L> quote_not <m:byte_label> =>{
        out.code.push(format!("not byte {}",m));
        context.mapper.add_entry(start);
    },
}

quote_not:() = {
    "NOT",
    "not"
}

// Following Should work for all instructions that require params of type:
// reg,reg
// reg,mem
// mem,reg
// reg,immediate
// mem,immediate
binary_logical:() = {
    // reg,reg
    <start:@L> <q:quote_binary_logical> <r1:gen_byte_reg> "," <r2:gen_byte_reg> =>{
        out.code.push(format!("{} {},{}",q,r1,r2));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> <r1:gen_word_reg> "," <r2:gen_word_reg> =>{
        out.code.push(format!("{} {},{}",q,r1,r2));
        context.mapper.add_entry(start);
    },
    //reg,mem
    <start:@L> <q:quote_binary_logical> <r:gen_byte_reg> "," quote_byte_length <m:memory_addr> =>{
        out.code.push(format!("{} {}, byte {}",q,r,m));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> <r:gen_word_reg> "," quote_word_length <m:memory_addr> =>{
        out.code.push(format!("{} {}, word {}",q,r,m));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> <r:gen_byte_reg> "," <l:byte_label> =>{
        out.code.push(format!("{} {}, byte {}",q,r,l));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> <r:gen_word_reg> "," <l:word_label> =>{
        out.code.push(format!("{} {},word {}",q,r,l));
        context.mapper.add_entry(start);
    },
    // mem,reg
    <start:@L> <q:quote_binary_logical> quote_byte_length <m:memory_addr> "," <r:gen_byte_reg> =>{
        out.code.push(format!("{} byte {},{}",q,m,r));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> quote_word_length <m:memory_addr> "," <r:gen_word_reg> =>{
        out.code.push(format!("{} word {},{}",q,m,r));
        context.mapper.add_entry(start);
    },
    //reg , immediate
    <start:@L> <q:quote_binary_logical> <r:gen_byte_reg> "," <n:byte_num> =>{
        out.code.push(format!("{} {},{}",q,r,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> <r:gen_word_reg> "," <n:word_num> =>{
        out.code.push(format!("{} {},{}",q,r,n));
        context.mapper.add_entry(start);
    },
    // mem, immediate
    <start:@L> <q:quote_binary_logical> quote_byte_length <m:memory_addr> "," <n:byte_num> =>{
        out.code.push(format!("{} byte {}, {}",q,m,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> quote_word_length <m:memory_addr> "," <n:word_num> =>{
        out.code.push(format!("{} word {},{}",q,m,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical> <m:byte_label> "," <n:byte_num> =>{
        out.code.push(format!("{} byte {}, {}",q,m,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_binary_logical>  <m:word_label> "," <n:word_num> =>{
        out.code.push(format!("{} word {},{}",q,m,n));
        context.mapper.add_entry(start);
    },
}
quote_binary_logical:String = {
    "AND" => "and".to_owned(),
    "and" => "and".to_owned(),
    "OR" => "or".to_owned(),
    "or" => "or".to_owned(),
    "XOR" => "xor".to_owned(),
    "xor" => "xor".to_owned(),
    //verify test
    "TEST" => "test".to_owned(),
    "test" => "test".to_owned(),
}


shift_rotate:() = {
    // register
    <start:@L> <q:quote_shift_rotate> <r:gen_reg> "," <n:byte_num> => {
        out.code.push(format!("{} {},{}",q,r,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_shift_rotate> <r:gen_reg> "," reg_cl => {
        out.code.push(format!("{} {}, cl",q,r));
        context.mapper.add_entry(start);
    },

    // memory
    <start:@L> <q:quote_shift_rotate> <m:memory_addr> "," <n:byte_num> => {
        out.code.push(format!("{} {},{}",q,m,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_shift_rotate> <m:memory_addr> "," reg_cl => {
        out.code.push(format!("{} {},cl",q,m));
        context.mapper.add_entry(start);
    },
    // label
    <start:@L> <q:quote_shift_rotate> <m:byte_label> "," <n:byte_num> => {
        out.code.push(format!("{} {},{}",q,m,n));
        context.mapper.add_entry(start);
    },
    // Support byte_nm only as anyway 256 will clear out the 16 bit number
    <start:@L> <q:quote_shift_rotate> <m:word_label> "," <n:byte_num> => {
        out.code.push(format!("{} {},{}",q,m,n));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_shift_rotate> <m:byte_label> "," reg_cl => {
        out.code.push(format!("{} {}, cl",q,m));
        context.mapper.add_entry(start);
    },
    <start:@L> <q:quote_shift_rotate> <m:word_label> "," reg_cl => {
        out.code.push(format!("{} {}, cl",q,m));
        context.mapper.add_entry(start);
    },
}


quote_shift_rotate:String = {
    "SAL" => "sal".to_owned(),
    "sal" => "sal".to_owned(),
    "SHL" => "sal".to_owned(),
    "shl" => "sal".to_owned(),
    "SAR" => "sar".to_owned(),
    "sar" => "sar".to_owned(),
    "SHR" => "shr".to_owned(),
    "shr" => "shr".to_owned(),
    "ROL" => "rol".to_owned(),
    "rol" => "rol".to_owned(),
    "ROR" => "ror".to_owned(),
    "ror" => "ror".to_owned(),
    "RCL" => "rcl".to_owned(),
    "rcl" => "rcl".to_owned(),
    "RCR" => "rcr".to_owned(),
    "rcr" => "rcr".to_owned(),
}


// ----------------------------------
// Transfer Instructions

transfer:() = {
    call,
    ret,
    jmps_loops,
}


call:() = {
    <start:@L> quote_call <n:name_string> <end:@R> =>?{
        if !context.fn_map.contains_key(&n){
            return preprocessor_error!(start,end,"",format!("\'call\' can be only used with procedures, {} is not a procedure",n));
        }else{
            out.code.push(format!("call {}",n));
            context.mapper.add_entry(start);
            return Ok(());
        }
        
    },
}
quote_call:()={
    "CALL",
    "call"
}

ret:() = {
    <start:@L> quote_ret <end:@R> =>{
        out.code.push("ret".to_owned());
        context.mapper.add_entry(start);        
    }
}

quote_ret:() = {
    "RET",
    "ret"
}

// TODO support int ?
int:() = {
    <start:@L> quote_int <n:byte_num> <end:@R> =>?{
        preprocessor_error!(start,end,"int","\'int\' is not supported".to_owned())
    }
}

quote_int:() = {
    "INT",
    "int"
}

into_iret:() = {
    <start:@L> <q:quote_into_iret> <end:@R> =>?{
        preprocessor_error!(start,end,"",format!("\'{}\' is not supported",q))
    }
}

quote_into_iret:String = {
    "INTO" => "into".to_owned(),
    "into" => "into".to_owned(),
    "IRET" => "iret".to_owned(),
    "iret" => "iret".to_owned(),
}


// All jumps and loops are combined in single, as they have same syntax
jmps_loops:() = {
    <start:@L> <q:quote_jmps_loops> <n:name_string><end:@R> =>{
        out.code.push(format!("{} {}",q,n));
        context.mapper.add_entry(start);
        if !context.label_map.contains_key(&n){
            context.undefined_labels.insert(n);
        }
        
    }
}

quote_jmps_loops:String = {
    "JMP" => "jmp".to_owned(),
    "jmp" => "jmp".to_owned(),
    "JA" => "ja".to_owned(),
    "ja" => "ja".to_owned(),
    "JNBE" => "jnbe".to_owned(),
    "jnbe" => "jnbe".to_owned(),
    "JAE" => "jae".to_owned(),
    "jae" => "jae".to_owned(),
    "JNB" => "jnb".to_owned(),
    "jnb" => "jnb".to_owned(),
    "JB" => "jb".to_owned(),
    "jb" => "jb".to_owned(),
    "JNAE" => "jnae".to_owned(),
    "jnae" => "jnae".to_owned(),
    "JBE" => "jbe".to_owned(),
    "jbe" => "jbe".to_owned(),
    "JNA" => "jna".to_owned(),
    "jna" => "jna".to_owned(),
    "JC" => "jc".to_owned(),
    "jc" => "jc".to_owned(),
    "JE" => "je".to_owned(),
    "je" => "je".to_owned(),
    "JZ" => "jz".to_owned(),
    "jz" => "jz".to_owned(),
    "JG" => "jg".to_owned(),
    "jg" => "jg".to_owned(),
    "JNLE" => "jnle".to_owned(),
    "jnle" => "jnle".to_owned(),
    "JGE" => "jge".to_owned(),
    "jge" => "jge".to_owned(),
    "JNL" => "jnl".to_owned(),
    "jnl" => "jnl".to_owned(),
    "JL" => "jl".to_owned(),
    "jl" => "jl".to_owned(),
    "JNGE" => "jnge".to_owned(),
    "jnge" => "jnge".to_owned(),
    "JLE" => "jle".to_owned(),
    "jle" => "jle".to_owned(),
    "JNG" => "jng".to_owned(),
    "jng" => "jng".to_owned(),
    "JNC" => "jnc".to_owned(),
    "jnc" => "jnc".to_owned(),
    "JNE" => "jne".to_owned(),
    "jne" => "jne".to_owned(),
    "JNZ" => "jnz".to_owned(),
    "jnz" => "jnz".to_owned(),
    "JNO" => "jno".to_owned(),
    "jno" => "jno".to_owned(),
    "JNP" => "jnp".to_owned(),
    "jnp" => "jnp".to_owned(),
    "JPO" => "jpo".to_owned(),
    "jpo" => "jpo".to_owned(),
    "JNS" => "jns".to_owned(),
    "jns" => "jns".to_owned(),
    "JO" => "jo".to_owned(),
    "jo" => "jo".to_owned(),
    "JP" => "jp".to_owned(),
    "jp" => "jp".to_owned(),
    "JPE" => "jpe".to_owned(),
    "jpe" => "jpe".to_owned(),
    "JS" => "js".to_owned(),
    "js" => "js".to_owned(),
    "LOOP" => "loop".to_owned(),
    "loop" => "loop".to_owned(),
    "LOOPE" => "loope".to_owned(),
    "loope" => "loope".to_owned(),
    "LOOPZ" => "loopz".to_owned(),
    "loopz" => "loopz".to_owned(),
    "LOOPNE" => "loopne".to_owned(),
    "loopne" => "loopne".to_owned(),
    "LOOPNZ" => "loopnz".to_owned(),
    "loopnz" => "loopnz".to_owned(),
    "JCXZ" => "jcxz".to_owned(),
    "jcxz" => "jcxz".to_owned(),
}

// ----------------------------------
// Control Instructions

control:()={
    ctc,
    clc,
    cmc,
    std,
    cld,
    sti,
    cli,
    hlt,
    wait,
    esc,
    lock,
    nop
}

ctc:()={
    <start:@L> "CTC" =>{out.code.push("ctc".to_owned());context.mapper.add_entry(start);},
    <start:@L> "ctc" =>{out.code.push("ctc".to_owned());context.mapper.add_entry(start);}
}
clc:()={
    <start:@L> "CLC" =>{out.code.push("clc".to_owned());context.mapper.add_entry(start);},
    <start:@L> "clc" =>{out.code.push("clc".to_owned());context.mapper.add_entry(start);}
}
cmc:()={
    <start:@L> "CMC" =>{out.code.push("cmc".to_owned());context.mapper.add_entry(start);},
    <start:@L> "cmc" =>{out.code.push("cmc".to_owned());context.mapper.add_entry(start);}
}
std:()={
    <start:@L> "STD" =>{out.code.push("std".to_owned());context.mapper.add_entry(start);},
    <start:@L> "std" =>{out.code.push("std".to_owned());context.mapper.add_entry(start);}
}
cld:()={
    <start:@L> "CLD" =>{out.code.push("cld".to_owned());context.mapper.add_entry(start);},
    <start:@L> "cld" =>{out.code.push("cld".to_owned());context.mapper.add_entry(start);}
}
sti:()={
    <start:@L> "STI" =>{out.code.push("sti".to_owned());context.mapper.add_entry(start);},
    <start:@L> "sti" =>{out.code.push("sti".to_owned());context.mapper.add_entry(start);}
}
cli:()={
    <start:@L> "CLI" =>{out.code.push("cli".to_owned());context.mapper.add_entry(start);},
    <start:@L> "cli" =>{out.code.push("cli".to_owned());context.mapper.add_entry(start);}
}
hlt:()={
    <start:@L> "HLT" =>{out.code.push("hlt".to_owned());context.mapper.add_entry(start);},
    <start:@L> "hlt" =>{out.code.push("hlt".to_owned());context.mapper.add_entry(start);}
}
wait:()={
    <start:@L> "WAIT" =>?preprocessor_error!(start,start+4,"WAIT","\'wait\' is not supported.".to_owned()),
    <start:@L> "wait" =>?preprocessor_error!(start,start+4,"wait","\'wait\' is not supported.".to_owned())
}
esc:()={
    <start:@L> "ESC" =>?preprocessor_error!(start,start+3,"ESC","\'esc\' is not supported.".to_owned()),
    <start:@L> "esc" =>?preprocessor_error!(start,start+3,"esc","\'esc\' is not supported.".to_owned())
}
lock:()={
    <start:@L> "LOCK" =>?preprocessor_error!(start,start+4,"LOCK","\'lock\' is not supported.".to_owned()),
    <start:@L> "lock" =>?preprocessor_error!(start,start+4,"lock","\'lock\' is not supported.".to_owned())
}
nop:()={
    <start:@L> "NOP" =>,
    <start:@L> "nop" =>
}


// ---------------------------------------------------------------------------------------------


// Low Level non-Terminals

// Label
// syntax : string immediately followed by a ':'
label:String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*:"> =>?{
        match context.label_map.get(&s[0..s.len()-1]){
            Some(l) => return preprocessor_error!(l.source_position as usize,l.source_position as usize+s.len(),s,"Label Already defined".to_owned()),
            None => Ok(s[0..s.len()-1].to_owned())
        }
    }
}


// Used to denote a 16-bit number
// can be a binary, decimal or hexadecimal number
// all are converted to u16
word_num: u16 = {
    // Decimal

    <start:@L> <n:r"[0-9]+"> <end:@R> =>? {
        match u16::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-65535".to_owned())
        }
    },

    // hexadecimal
    <start:@L> <n:r"0(x|X)[0-9A-Fa-f]+"> <end:@R> =>? {
        match u16::from_str_radix(&n[2..],16){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-65535".to_owned())
        }
    },

    // Binary
    <start:@L> <n:r"0(b|B)[0-1]+"> <end:@R> =>? {
        match u16::from_str_radix(&n[2..],2){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-65535".to_owned())
        }
    },
    offset
}


// Used to denote a 8-bit number
// can be a binary, decimal or hexadecimal number
// all are converted to u16
byte_num: u8 = {
    // Decimal
    <start:@L> <n:r"[0-9]+"> <end:@R> =>? {
        match u8::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-255".to_owned())
        }
    },

    // hexadecimal
    <start:@L> <n:r"0(x|X)[0-9A-Fa-f]+"> <end:@R> =>? {
        match u8::from_str_radix(&n[2..],16){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-255".to_owned())
        }
    },

    // Binary
    <start:@L> <n:r"0(b|B)[0-1]+"> <end:@R> =>? {
        match u8::from_str_radix(&n[2..],2){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-255".to_owned())
        }
    },
    <start:@L> <o:offset> <end:@R> =>?{
        if o > 255{
            preprocessor_error!(start,end,"",format!("Offset is greater than 255"))
        }else{
            Ok(o as u8)
        }
    }
}

raw_addr: u32 = {
    // Decimal
    <start:@L> <n:r"[0-9]+"> <end:@R> =>? {
        match u32::from_str_radix(n,10){
            Ok(v) => Ok(v%MB),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-1048576".to_owned())
        }
    },

    // hexadecimal
    <start:@L> <n:r"0(x|X)[0-9A-Fa-f]+"> <end:@R> =>? {
        match u32::from_str_radix(&n[2..],16){
            Ok(v) => Ok(v%MB),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-1048576".to_owned())
        }
    },

    // Binary
    <start:@L> <n:r"0(b|B)[0-1]+"> <end:@R> =>? {
        match u32::from_str_radix(&n[2..],2){
            Ok(v) => Ok(v%MB),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-1048576".to_owned())
        }
    },
    <o:offset> =>{
       o as u32
    }
}


offset:u16 = {
    <start:@L> quote_offset  <n:name_string> <end:@R> =>?{
        match context.label_map.get(&n){
            Some(l)=>{
                match l.get_type(){
                    LabelType::CODE => {preprocessor_error!(start,end,"",format!("\'offset\' can be used only with data labels, {} is not a data label",n))}
                    LabelType::DATA => {return Ok(l.map as u16);}
                }
            }
            None => {preprocessor_error!(start,end,"",format!("Label {} is not declared.",n))}
        }
    }
}

quote_offset:() = {
    "OFFSET",
    "offset"
}

// ---------------------------------------------------------------------------------------------

// Helpers

gen_reg:String = {
    gen_byte_reg,
    gen_word_reg
}

gen_byte_reg:String = {
    "AH" => "ah".to_owned(),
    "ah" => "ah".to_owned(),
    "AL" => "al".to_owned(),
    "al" => "al".to_owned(),
    "BH" => "bh".to_owned(),
    "bh" => "bh".to_owned(),
    "BL" => "bl".to_owned(),
    "bl" => "bl".to_owned(),
    "CH" => "ch".to_owned(),
    "ch" => "ch".to_owned(),
    reg_cl,
    "DH" => "dh".to_owned(),
    "dh" => "dh".to_owned(),
    "DL" => "dl".to_owned(),
    "dl" => "dl".to_owned(),
}

reg_cl:String = {
    "CL" => "cl".to_owned(),
    "cl" => "cl".to_owned(),
}

gen_word_reg:String = {
    "AX" => "ax".to_owned(),
    "ax" => "ax".to_owned(),
    "BX" => "bx".to_owned(),
    "bx" => "bx".to_owned(),
    "CX" => "cx".to_owned(),
    "cx" => "cx".to_owned(),
    "DX" => "dx".to_owned(),
    "dx" => "dx".to_owned(),
}

base_index_reg:String = {
    base_reg,
    index_reg
}

base_reg:String = {
    "BX" => "bx".to_owned(),
    "bx" => "bx".to_owned(),
    "BP" => "bp".to_owned(),
    "bp" => "bp".to_owned(),
}

index_reg:String = {
    "SI" => "si".to_owned(),
    "si" => "si".to_owned(),
    "DI" => "di".to_owned(),
    "di" => "di".to_owned(),
}

memory_addr:String = {
    // direct addressing
    "[" <n:word_num> "]" => format!("[{}]",n),
    // Register Indirect
    "[" <r:base_index_reg> "]" => format!("[{}]",r),
    // Based
    "[" <r:base_reg> "," <n:word_num> "]" => format!("[{},{}]",r,n),
    // indexed
    "[" <r:index_reg> "," <n:word_num> "]" => format!("[{},{}]",r,n),
    //based indexed
    "[" <b:base_reg> "," <i:index_reg> <k:("," <word_num>)?> "]" => {
        match k{
            Some(n) => format!("[{},{},{}]",b,i,n),
            None => format!("[{},{},{}]",b,i,0),
        }
    },
}

byte_label:String = {
    <start:@L> <l:quote_byte_length> <n:name_string> <end:@R> =>? {
        match context.label_map.get(&n){
            None => {return preprocessor_error!(start,end,"",format!("Label {} not defined",n));},
            Some(l) => {
                match l.get_type() {
                    LabelType::CODE => {return preprocessor_error!(start,end,"",format!("Cannot use Code label {}  ",n));}
                    _ =>{}
                }
            } 
        } 
        Ok(n)
    }
}

word_label:String = {
    <start:@L> <l:quote_word_length> <n:name_string> <end:@R> =>? {
        match context.label_map.get(&n){
            None => {return preprocessor_error!(start,end,"",format!("Label {} not defined",n));},
            Some(l) => {
                match l.get_type() {
                    LabelType::CODE => {return preprocessor_error!(start,end,"",format!("Cannot use Code label {}  ",n));}
                    _ =>{}
                }
            } 
        } 
        Ok(n)
    }
}

quote_byte_length:String = {
    "BYTE" => "byte".to_owned(),
    "byte" => "byte".to_owned(),
}

quote_word_length:String = {
    "WORD" => "word".to_owned(),
    "word" => "word".to_owned(),
}


CommaSepList<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

name_string:String ={
    <v:r"[_a-zA-Z][_a-zA-Z0-9]*"> =>{
        v.to_owned()
    }
}
general_string:String = {
    name_string,
    <n:word_num> =>format!("{}",n)
}