use crate::util::preprocessor_util as util;
use util::LabelType;
use regex::{Regex,Captures};
use crate::preprocessor_error;
use lalrpop_util::ParseError;

// NOTES
// quote_ tokens are used for creating case ignoring names, as r"(capital case|small case)" generates ambiguity
//      if not this, either manually implement both with same code, else try r"(capital case|small case) " (with space)
//      but that can have issues as well
//
// name_string is a string that can be used for macro, function or label name, must start with _ or alphabet
// general_string is string that accepts nam_string, number, spaces, and square brackets [] 

grammar<'s>(context:&'s mut util::Context,out:&'s mut util::Output);

pub Code:() = {
    data_directives,
}

// ---------------------------------------------------------------------------------------------

// Assembler Data Directives

// Collective of all data directives
pub data_directives:() = {
    set_directive,
    db_directive,
    dw_directive,
    data_directives set_directive,
    data_directives db_directive,
    data_directives dw_directive,
}

// Set directive : used to set the DS value manually
set_directive:() = {
    quote_set <n:word_num> => {
        out.data.push(format!("set {}",n));
    }
}

quote_set:()={
    "set",
    "SET"
}

// DB directive
db_directive:() = {
    // Set single value with label
    <start:@L> <l:label> quote_db <n:byte_num> =>{
        context.label_map.insert(l,(LabelType::DATA,start as u16,context.data_counter));
        out.data.push(format!("db {}",n));
        // Increment the data counter
        context.data_counter += 1;
    },
    // Set single value without label
    quote_db <n:byte_num> =>{
        out.data.push(format!("db {}",n));
        // Increment the data counter
        context.data_counter += 1;
    },
    // Set array value initialized to 0 with label
    <start:@L> <l:label> quote_db "["<n:word_num>"]" =>{
        context.label_map.insert(l,(LabelType::DATA,start as u16,context.data_counter));
        out.data.push(format!("db [{}]",n));
        // Increment the data counter
        context.data_counter += n;
    },
    // Set array value initialized to 0 without label
    quote_db "[" <n:word_num>"]" =>{
        out.data.push(format!("db [{}]",n));
        // Increment the data counter
        context.data_counter += n;
    },
    // Set array value initialized to value with label
    <start:@L> <l:label> quote_db "["<n:word_num> ";" <v:byte_num>"]" =>{
        context.label_map.insert(l,(LabelType::DATA,start as u16,context.data_counter));
        out.data.push(format!("db [{} ; {}]",n,v));
        // Increment the data counter
        context.data_counter += n;
    },
    // Set array value initialized to value without label
    quote_db "[" <n:word_num> ";" <v:byte_num> "]" =>{
        out.data.push(format!("db [{} ; {}]",n,v));
        // Increment the data counter
        context.data_counter += n;
    },
}

quote_db:() = {
    "DB",
    "db",
}

// DW directive
dw_directive:() = {
    // Set single value with label
    <start:@L> <l:label> quote_dw <n:word_num> =>{
        context.label_map.insert(l,(LabelType::DATA,start as u16,context.data_counter));
        out.data.push(format!("dw {}",n));
        // Increment the data counter
        context.data_counter += 2;
    },
    // Set single value without label
    quote_dw <n:word_num> =>{
        out.data.push(format!("dw {}",n));
        // Increment the data counter
        context.data_counter += 2;
    },
    // Set array value initialized to 0 with label
    <start:@L> <l:label> quote_dw "["<n:word_num>"]" =>{
        context.label_map.insert(l,(LabelType::DATA,start as u16,context.data_counter));
        out.data.push(format!("dw [{}]",n));
        // Increment the data counter
        context.data_counter += 2*n;
    },
    // Set array value initialized to 0 without label
    quote_dw "[" <n:word_num>"]" =>{
        out.data.push(format!("dw [{}]",n));
        // Increment the data counter
        context.data_counter += 2*n;
    },
    // Set array value initialized to value with label
    <start:@L> <l:label> quote_dw "["<n:word_num> ";" <v:word_num>"]" =>{
        context.label_map.insert(l,(LabelType::DATA,start as u16,context.data_counter));
        out.data.push(format!("dw [{} ; {}]",n,v));
        // Increment the data counter
        context.data_counter += 2*n;
    },
    // Set array value initialized to value without label
    quote_dw "[" <n:word_num> ";" <v:word_num> "]" =>{
        out.data.push(format!("dw [{} ; {}]",n,v));
        // Increment the data counter
        context.data_counter += 2*n;
    },
}

quote_dw:() = {
    "dw",
    "DW"
}


// ---------------------------------------------------------------------------------------------

// Assembler code Directives

// Collective of all code directives
pub code_directives:() = {
    macro_def,
    macro_use,
    code_directives macro_def,
    code_directives macro_use,
}

// As lalrpop does not support optional token, and makes it an ambiguity error 
// if we use r"(MACRO|macro)" we will have to use this double declaration :(
// Closing bracket is counted and removed in raw_code
pub macro_def:() = {
    quote_macro <name:name_string> "(" <params:CommaSepList<name_string>> ")" "{" <r:raw_code> =>{
        let mut r = r.clone();
        // TODO Maybe optimise this later
        // maybe try making single regex of all params and replace, somehow
        for (i,p) in params.iter().enumerate(){
            let pat = format!(r"\b{}\b",p);
            let re = Regex::new(&pat).unwrap();
            r = re.replace_all(&r,|caps:&Captures|{
                format!("{{{}}}",i)
            }).to_string();
        }
        context.macro_map.insert(name,r);
    }
}

quote_macro:()={
    "MACRO",
    "macro"
}

raw_code:String = {
    <s:r"[_a-zA-Z0-9 \[\]]*}"> =>s[0..s.len()-2].to_owned()
}

macro_use:() = {
    <start:@L> <l:r"[_a-zA-Z][_a-zA-Z0-9]*"> "(" <params:CommaSepList<general_string>> ")" <end:@R> =>? {
        match context.macro_map.get(l){
            Some(value)=>{
                let mut r = value.clone();
                // TODO Maybe optimise this later
                // maybe try making single regex of all params and replace, somehow
                for (i,p) in params.iter().enumerate(){
                    let pat = format!("{{{}}}",i);
                    r = r.replace(&pat,&p);
                }
                let p = CodeParser::new();
                let o = p.parse(context,out,&r);
                match o{
                    Ok(_)=>Ok(()),
                    Err(e)=>{
                        // TODO better format error, maybe send the error position in formatted string as well?
                        preprocessor_error!(start,end,l,"Error in macro expansion".to_owned())
                    }
                }
            },
            None => preprocessor_error!(start as usize,start +l.len(),l,"Macro not defined".to_owned()),
        }
    }
}

// TODO def procedure
// TODO offset ?


// ---------------------------------------------------------------------------------------------


// Assembler opcodes


// ---------------------------------------------------------------------------------------------


// Low Level non-Terminals

// Label
// syntax : string immediately followed by a ':'
label:String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*:"> =>?{
        match context.label_map.get(&s[0..s.len()-2]){
            Some((_,pos,_)) => return preprocessor_error!(*pos as usize,*pos as usize+s.len(),s,"Label Already defined".to_owned()),
            None => Ok(s[0..s.len()-2].to_owned())
        }
    }
}


// Used to denote a 16-bit number
// can be a binary, decimal or hexadecimal number
// all are converted to u16
word_num: u16 = {
    // Decimal

    <start:@L> <n:r"[0-9]+"> <end:@R> =>? {
        match u16::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-65535".to_owned())
        }
    },

    // hexadecimal
    <start:@L> <n:r"0(x|X)[0-9A-Fa-f]+"> <end:@R> =>? {
        match u16::from_str_radix(&n[2..],16){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-65535".to_owned())
        }
    },

    // Binary
    <start:@L> <n:r"0(b|B)[0-1]+"> <end:@R> =>? {
        match u16::from_str_radix(&n[2..],2){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-65535".to_owned())
        }
    }
}


// Used to denote a 8-bit number
// can be a binary, decimal or hexadecimal number
// all are converted to u16
byte_num: u8 = {
    // Decimal

    <start:@L> <n:r"[0-9]+"> <end:@R> =>? {
        match u8::from_str_radix(n,10){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-255".to_owned())
        }
    },

    // hexadecimal
    <start:@L> <n:r"0(x|X)[0-9A-Fa-f]+"> <end:@R> =>? {
        match u8::from_str_radix(&n[2..],16){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-255".to_owned())
        }
    },

    // Binary
    <start:@L> <n:r"0(b|B)[0-1]+"> <end:@R> =>? {
        match u8::from_str_radix(&n[2..],2){
            Ok(v) => Ok(v),
            Err(_) => preprocessor_error!(start,end,n,"Invalid Value, must be between 0-255".to_owned())
        }
    }
}

// ---------------------------------------------------------------------------------------------

// Helpers

CommaSepList<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

name_string:String ={
    <v:r"[_a-zA-Z][_a-zA-Z0-9]*"> =>{
        v.to_owned()
    }
}
general_string:String = {
    name_string,
    <n:word_num> =>format!("{}",n)
}